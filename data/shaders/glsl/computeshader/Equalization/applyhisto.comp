#version 450

layout (local_size_x = 1024, local_size_y = 1) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 2, rgba8) uniform image2D resultImage;
#define HISTO_SIZE 256

layout (binding = 1) buffer HistoEq
{
	uint histoBin[HISTO_SIZE];
    float cdf[HISTO_SIZE];
    //uint sum;

} histoEq;

shared float s_cdfMinY;


const mat3 ToYUV = mat3
(
    0.299, -0.169 , 0.499,
    0.587, -0.331, -0.418,
    0.114, 0.499,-0.0813
);

const mat3 ToRGB = mat3
(
    1.0, 1.0 ,  1.0,
    0.0, -0.344, 1.772,
    1.402, -0.714, 0.0
);

float CorrectComp(in float cdfVal , in float cdfMin )
{
    return clamp((cdfVal - cdfMin) / (1.0 - cdfMin), 0.0, 1.0);
    //return clamp(255.0 * (cdfVal - cdfMin) / ( 1.0 - cdfMin) , 0.0 , 255.0 );
}

void main()
{
    uint tid = gl_GlobalInvocationID.x ;
    uvec2 imageDim = imageSize(inputImage) ;
    
    if(tid == 0)
        s_cdfMinY = histoEq.cdf[0];
    memoryBarrierShared();
    barrier();

    if(tid < imageDim.x * imageDim.y )
    {
       //make thread into 2D
       uint x = tid % imageDim.x;
       uint y = tid / imageDim.x;
       vec3 pixel = imageLoad(inputImage, ivec2(x,y)).rgb;

       vec3 YUV = ToYUV * pixel;
       uint index = uint(clamp(YUV.r * 255.0,0.0,255.0));
       YUV.r = CorrectComp(histoEq.cdf[index],s_cdfMinY);
       vec3 rgb = clamp(ToRGB * YUV,vec3(0.0),vec3(1.0));
       imageStore(resultImage, ivec2(x,y), vec4(rgb,1.0));
    }

  
}
 	
 
 
 
