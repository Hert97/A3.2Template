/* Start Header *****************************************************************/ 

/*! \file applyhisto.comp

     \author Ho Yi Guan, yiguan.ho

     \par email: yiguan.ho@digipen.edu) 

     \date Sept 02, 2022

     \brief Apply histogram equalization to output image
     Copyright (C) 2022 DigiPen Institute of Technology. 

  Reproduction or disclosure of this file or its contents without the prior written consent of DigiPen Institute of Technology is prohibited. */ 

/* End Header *******************************************************************/ 
#version 450

layout (local_size_x = 1024, local_size_y = 1) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 2, rgba8) uniform image2D resultImage;
#define HISTO_SIZE 256

layout (binding = 1) buffer HistoEq
{
	uint histoBin[HISTO_SIZE];
    float cdf[HISTO_SIZE];

} histoEq;

shared float s_cdf[HISTO_SIZE];


const mat3 ToYUV = mat3
(
    0.299, -0.169 ,  0.499,
    0.587, -0.331 , -0.418,
    0.114,  0.499 , -0.0813
);

const mat3 ToRGB = mat3
(
    1.0  ,  1.0  ,  1.0  ,
    0.0  , -0.344,  1.772,
    1.402, -0.714,  0.0
);

float CorrectComp(in float cdfVal , in float cdfMin )
{
    return clamp((cdfVal - cdfMin) / (1.0 - cdfMin), 0.0, 1.0);
}

void main()
{
    uint tid = gl_GlobalInvocationID.x ;
    uvec2 imageDim = imageSize(inputImage) ;

    if(gl_LocalInvocationID.x < HISTO_SIZE)
        s_cdf[gl_LocalInvocationID.x] 
        = histoEq.cdf[gl_LocalInvocationID.x];

    memoryBarrierShared();
    barrier();
    float cdfMin = s_cdf[0];
    if(tid < imageDim.x * imageDim.y )
    {
       //make thread into 2D
       uint x = tid % imageDim.x;
       uint y = tid / imageDim.x;
       vec3 pixel = imageLoad(inputImage, ivec2(x,y)).rgb;

       vec3 YUV = ToYUV * pixel;
       uint index = uint(clamp(YUV.r * 255.0,0.0,255.0));
       YUV.r = CorrectComp(s_cdf[index],cdfMin);
       vec3 rgb = clamp(ToRGB * YUV,vec3(0.0),vec3(1.0));
       imageStore(resultImage, ivec2(x,y), vec4(rgb,1.0));
    }
    memoryBarrierShared();
    barrier();
  
}
 	
 
 
 
